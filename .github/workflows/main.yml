name: "Build APK & AAB Release"

# Trigger the workflow manually via workflow_dispatch.
on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: 'Release Branch (e.g., release/1.0.0)'
        required: true
        type: string

permissions:
  # Required for actions/checkout@v3
  contents: write

jobs:
  build:
    name: Build APK & AAB Release
    runs-on: windows-latest

    # Setting environment variables using GitHub secrets for secure access
    env:
      STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

    steps:
       # Step 1: Check out the code from the repository
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.release_branch }}
          fetch-depth: 0

      # Step 2: Set up Java 17 using the Zulu distribution (required for Android builds)
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # Step 3: Set up Flutter using the Flutter action and specify version, channel, and architecture
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.0'
          channel: 'stable'
          architecture: x64

      # Step 4: Decode the Keystore file (for signing the APK and AAB)
      - name: Decode Keystore
        run: |
          $base64Encoded = "${{ secrets.KEYSTORE_BASE64 }}"
          [System.IO.File]::WriteAllBytes("android/app/keystore.jks", [System.Convert]::FromBase64String($base64Encoded))
        shell: pwsh
        
      # Step 5: Cache Flutter dependencies to speed up the build process
      - name: Cache Flutter Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.FLUTTER_HOME }}/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: | 
            ${{ runner.os }}-flutter-

      # Step 6: Increment the version in pubspec.yaml and update the build number
      - name: Increment App Version
        id: version
        run: |
          $pubspecPath = "pubspec.yaml"
          $content = Get-Content $pubspecPath
          $updatedContent = @()
          $versionFound = $false
          foreach ($line in $content) {
            if ($line -match "^version:\s") {
              $versionFound = $true
              $versionParts = $line -split '\s+' 
              $versionString = $versionParts[1]
              $buildNumberPart = $versionString.Split("+")[1] -split '\s*#'
              $buildNumber = [int]$buildNumberPart[0]
              $newBuildNumber = $buildNumber + 1
              $newVersion = "$($versionParts[1].Split('+')[0])+$newBuildNumber"
              echo "NEW_VERSION=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Append
              echo "::set-output name=new-version::$newVersion"
              $updatedContent += "version: $newVersion"
            } else {
              $updatedContent += $line
            }
          }
          if (!$versionFound) {
            Write-Error "Version string not found in pubspec.yaml"
            exit 1
          }
          Set-Content -Path $pubspecPath -Value $updatedContent
        shell: pwsh


      # Step 7: Update Android build.gradle with new versionCode and versionName
      - name: Update Android Version
        run: |
          $buildGradlePath = "android/app/build.gradle"
          $content = Get-Content $buildGradlePath
          $newVersionCodeLine = "versionCode $NEW_BUILD_NUMBER"
          $newVersionNameLine = 'versionName "$NEW_VERSION"'

          (Get-Content $buildGradlePath) | ForEach-Object {
            if ($_ -match "versionCode ") {
              $_ = $newVersionCodeLine
            }
            if ($_ -match "versionName ") {
              $_ = $newVersionNameLine
            }
          } | Set-Content $buildGradlePath
        shell: pwsh

      # Step 8: Commit updated pubspec.yaml and build.gradle, and push changes
      - name: Commit and Push Updated pubspec.yaml and android/app/build.gradle
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git add pubspec.yaml android/app/build.gradle
          git commit -m "Increment app version to $NEW_VERSION"
          git push origin ${{ github.event.inputs.release_branch }}

      # Step 9: Generate Release Notes
      - name: Generate Release Notes
        id: changelog
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: "${{ github.sha }}",
              per_page: 10,
            });

            let changelog = "**Changelog:**\n";
            let foundCommits = false;

            for (const commit of commits) {
              const message = commit.commit.message;
              // Include commit messages with specific prefixes: 'fix:', 'feat:', or 'chore:'
              if (message.startsWith("feat:") || message.startsWith("fix:") || message.startsWith("chore:")) {
                changelog += `- ${message}\n`;
                foundCommits = true;
              }
            }
            if (!foundCommits) {
              changelog = "No significant changes in this release.";
            }
            // Set the generated changelog as an output
            core.setOutput("changelog", changelog);
          result-encoding: string

      
      # Step 10: Build the APK and AAB (Release Mode)
      - name: Build APK and AAB
        run: |
          flutter clean
          flutter pub get
          flutter build apk --release
          flutter build appbundle --release

      # Step 11: Create GitHub Release (includes changelog and APK/AAB)
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.TOKEN }}
          tag: "v${{ steps.version.outputs.new-version }}"
          name: "Release v${{ steps.version.outputs.new-version }}"
          draft: false
          prerelease: false
          generateReleaseNotes: false
          body: |
            **New Release Notes for Version ${{ steps.version.outputs.new-version }}**
            
            - Built APK and AAB files
            - Updated app version to ${{ steps.version.outputs.new-version }}
            ${{ steps.changelog.outputs.result }}
          artifacts: |
            build/app/outputs/apk/release/*.apk
            build/app/outputs/bundle/release/*.aab
          removeArtifacts: true

      # Step 12: Delete source archives
      - name: Delete source archives
        run: |
          Remove-Item -Path "*.zip", "*.tar.gz" -Force -ErrorAction Ignore
        shell: pwsh

      # Step 13: delete the keystore file after the build
      - name: Delete keystore.jks
        run: del android/app/keystore.jks

        
# Note: ✅ Run the workflow dispatch from the same branch where the workflow file is defined.

# Note:  ✅ Ensure while committing changes include fix:, feat:, and chore: in the commit messages to mention the changes respectively

# Workflow Steps:

  # Develop on Master: Make code changes, push to master (use PRs if master is protected).

  # Create Release Branch: When ready, branch from master as release/version (e.g., release/1.0.2), push to remote.

  # Manual Release: In GitHub "Actions" Tab, under "Build APK & AAB Release" Tab click on run workflow button," enter the release/version branch name.

  # Auto Release: Workflow builds APK/AAB, increments version, generates release notes, creates GitHub release, deletes keystore.

  # Repeat: For each release, create a new release//version branch.